<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>Admin</web>
  <name>InstalledExtensionsTweak</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Admin.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1425996514000</creationDate>
  <date>1442408884000</date>
  <contentUpdateDate>1442408884000</contentUpdateDate>
  <version>1.1</version>
  <title>Installed extensions tweaks</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{warning}}
As a page playing with installed extension it could be dangerous.
{{/warning}}

{{velocity output="false"}}
#set($installedExtensions = $services.extension.installed)
#set($extensionId = "$!request.extensionId")
#set($wiki = $request.wiki)
#if (!$wiki)
  #set($wiki = $xcontext.database)
#end
#set($namespace = $request.namespace)
#if (!$namespace)
  #set($namespace = "wiki:$wiki")
#end
#if("$!request.configDocName" != '')
  ## Request for creating a new instance. We don't actually create a new instance here, we just redirect to the edit mode.
  #set($targetConfigName = "${request.configSpaceName}.${request.configDocName}")
  #if(!$xwiki.exists($targetConfigName) &amp;&amp; $xwiki.hasAccessLevel('edit', $xcontext.user, $targetConfigName))
    ## Compute the default edit mode to ensure backward compatibility with documents still using the deprecated inline action.
    $response.sendRedirect($xwiki.getURL($targetConfigName, 'edit', "template=Admin.EMInstallConfigTemplate&amp;parent=Admin.InstalledExtensionsTweak&amp;title=$!escapetool.url($request.configDocName)"))
    ## Stop processing, since we already sent a redirect.
    #stop
  #end
#end
{{/velocity}}

= Make sure an extension and all its dependencies are installed on wikis and not on root namespace =

[since 5.3]

{{velocity}}
#macro(getRootExtensions $installedExtension $extensionNamespace $rootExtensions)
  ## Check the passed extension
  #if ($installedExtension.isInstalled($null))
    #set($void = $rootExtensions.put($installedExtension.id, $installedExtension))
    #set($extensionNamespace = $null)
  #end
  ##
  ## Check dependencies
  #foreach ($dependency in $installedExtension.dependencies)
    #set($dependencyExtension = $installedExtensions.getInstalledExtension($dependency.id, $extensionNamespace))
    #getRootExtensions($dependencyExtension, $extensionNamespace, $rootExtensions)
  #end
#end

#if ($request.eaction == 'movetowikis')
  #set($installedExtension = $installedExtensions.getInstalledExtension($extensionId, $namespace))
  #if ($installedExtension.id.id == $extensionId)
    #if ($installedExtension.isInstalled($null))
      #set($namespace = $null)
    #end
    #set($backwardDependencies = $installedExtensions.getBackwardDependencies($extensionId, $namespace))
    #if ($backwardDependencies.isEmpty())
      #set($rootExtensions = {})
      #getRootExtensions($installedExtension, $namespace, $rootExtensions)
      #if ($rootExtensions.isEmpty())
        {{warning}}Extension with id **$extensionId** available on wiki **$wiki** is not root extension and none of its dependencies are.{{/warning}}
      #else
        #if ($request.confirm == 'true')
          #if ($xwiki.hasAccessLevel('programming', $doc.fullName))
            #set($allWikis = $services.wiki.getAllIds())
            #foreach ($rootExtension in $rootExtensions.values())
              #set($void = $installedExtensions.repository.uninstallExtension($rootExtension, $null))
              #foreach ($wiki in $allWikis)
                #set($void = $installedExtensions.repository.installExtension($rootExtension, "wiki:$wiki", $rootExtension.isDependency($null)))
              #end
            #end
            {{success}}
              The following root extensions have been moved to each wiki:
              #foreach ($rootExtension in $rootExtensions.values())
                * $rootExtension#if ($rootExtension.type == 'jar') {{warning}}(require a restart to be fully applied){{/warning}}#end

              #end
            {{/success}}
          #else
            {{error}}You need programming right to execute this action.{{/error}}
          #end
        #else
          {{info}}
            The following root extensions will be moved to each wiki:
            #foreach ($rootExtension in $rootExtensions.values())
              * $rootExtension#if ($rootExtension.type == 'jar')({{warning}}require a restart to be fully applied{{/warning}})#end

            #end

            {{html}}
              &lt;form&gt;
                &lt;input type="hidden" name="confirm" value="true"/&gt;
                &lt;input type="hidden" name="eaction" value="movetowikis"/&gt;
                &lt;input type="hidden" name="extensionId" value="$extensionId"&gt;
                &lt;input type="hidden" name="wiki" value="$wiki"/&gt;
                &lt;input type="submit" value="Confirm"/&gt;
              &lt;/form&gt;
            {{/html}}
          {{/info}}
        #end
      #end
    #else
      {{error}}Extension with id **$extensionId** has backward dependencies ($backwardDependencies).{{/error}}
    #end
  #else
    {{error}}No extension with id **$extensionId** can be found on namespace $namespace.{{/error}} 
  #end
#end

{{html}}
 &lt;form&gt;
   &lt;input type="hidden" name="eaction" value="movetowikis"/&gt;&lt;/dd&gt;
   &lt;du&gt;
     &lt;dt&gt;Extension Id&lt;/dt&gt;
     &lt;dd&gt;&lt;input type="text" name="extensionId" value="$extensionId" size="100"&gt;&lt;/dd&gt;
     &lt;dt&gt;Wiki where it's installed (anything if installed on root)&lt;/dt&gt;
     &lt;dd&gt;&lt;input type="text" name="wiki" value="$wiki"/&gt;&lt;/dd&gt;
    &lt;/du&gt;
    &lt;span class="buttonwrapper"&gt;&lt;input type="submit" value="Move" class="button"/&gt;&lt;/span&gt;
  &lt;/form&gt; 
{{/html}}
{{/velocity}}

= Remove uninstalled extensions

[Since 5.3]

{{html}}
 &lt;form&gt;
   &lt;input type="hidden" name="eaction" value="clean_search"/&gt;&lt;/dd&gt;
   &lt;span class="buttonwrapper"&gt;&lt;input type="submit" value="Search" class="button"/&gt;&lt;/span&gt;
  &lt;/form&gt; 
{{/html}}

= Configuration for silent extension installation =

[tested since 5.4.7]

{{velocity}}
#if("$!targetConfigName" != '' &amp;&amp; $xwiki.exists($targetConfigName))
  {{warning}}The target document already exists. Please choose a different name, or [[view the existing document&gt;&gt;$targetConfigName]]{{/warning}}
#elseif("$!targetConfigName" != '')
  {{warning}}You don't have permission to create that document{{/warning}}
#end

{{html}}
&lt;form action="" id="newconfigdoc" method="post"&gt;
  &lt;div&gt;
    &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
    &lt;label for="configSpaceName"&gt;Space: &lt;/label&gt;&lt;input type="text" id="configSpaceName" name="configSpaceName" value="Admin" size="8"/&gt;
    &lt;label for="configDocName"&gt;Document: &lt;/label&gt;&lt;input type="text" id="configDocName" name="configDocName" value="Document name" class="withTip"'/&gt;         
    &lt;span class="buttonwrapper"&gt;&lt;input type="submit" value="Create a new configuration" class="button"/&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;/form&gt;
{{/html}}


**Existing configurations**

#set($sql = ", BaseObject as obj where obj.name=doc.fullName and obj.className=? and obj.name&lt;&gt;?")
#foreach ($item in $services.query.hql($sql).bindValues(['Admin.EMInstallConfigClass', 'Admin.EMInstallConfigTemplate']).execute())
  * [[$item]]
#end

#macro(searchExtensionsToRemove $extensionsToRemove)
  #set($localExtensions = $services.extension.local.localExtensions)
  #set($installedExtensionRepository = $services.extension.installed.repository)
  #foreach ($localExtension in $localExtensions)
    #if (!$installedExtensionRepository.getInstalledExtension($localExtension.id))
      #set($void = $extensionsToRemove.add($localExtension))
    #end
  #end
#end
#if ($request.eaction == 'clean_search')
  #set($extensionsToRemove = [])
  #searchExtensionsToRemove($extensionsToRemove)
  #if ($extensionsToRemove.isEmpty())
    {{info}}No extension to clean could be found{{/info}}
  #else
    {{box}}
    The following local extensions will be removed:
    #foreach ($extensionToRemove in $extensionsToRemove)
      * $extensionToRemove
    #end

    {{html}}
       &lt;form&gt;
         &lt;input type="hidden" name="eaction" value="clean_confirm"/&gt;&lt;/dd&gt;
         &lt;input type="submit" value="Confirm"/&gt;
       &lt;/form&gt; 
    {{/html}}
    {{/box}}
  #end
#elseif ($request.eaction == 'clean_confirm')
  #set($extensionsToRemove = [])
  #searchExtensionsToRemove($extensionsToRemove)
  #if ($extensionsToRemove.isEmpty())
    {{info}}No extension to clean could be found{{/info}}
  #else
    #set($localExtensionRepository = $services.extension.local.repository)
    #foreach ($extensionToRemove in $extensionsToRemove)
      #set($void = $localExtensionRepository.removeExtension($extensionToRemove))
      * {{success}}Extension $extensionToRemove has been removed from local repository{{/success}}
    #end
  #end
#end
{{/velocity}}</content>
</xwikidoc>
