<?xml version="1.0" encoding="UTF-8"?>
<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="Admin.ExtensionTweak.Installed.WebHome" locale="">
  <web>Admin.ExtensionTweak.Installed</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1702637680000</creationDate>
  <parent>Admin.ExtensionTweak.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1702637680000</date>
  <contentUpdateDate>1702637680000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{box cssClass="floatinginfobox" title="**Contents**"}}{{toc/}}{{/box}}

{{warning}}
As a page manipulating installed extensions, it could be dangerous.
{{/warning}}

{{velocity output="false"}}
#set($installedExtensions = $services.extension.installed)
#set($extensionId = "$!request.extensionId")
#set($wiki = $request.wiki)
#if (!$wiki)
  #set($wiki = $xcontext.database)
#end
#set($namespace = $request.namespace)
#if (!$namespace)
  #set($namespace = "wiki:$wiki")
#end
#if("$!request.configDocName" != '')
  ## Request for creating a new instance. We don't actually create a new instance here, we just redirect to the edit mode.
  #set($targetConfigName = "${request.configSpaceName}.${request.configDocName}")
  #if(!$xwiki.exists($targetConfigName) &amp;&amp; $xwiki.hasAccessLevel('edit', $xcontext.user, $targetConfigName))
    ## Compute the default edit mode to ensure backward compatibility with documents still using the deprecated inline action.
    $response.sendRedirect($xwiki.getURL($targetConfigName, 'edit', "template=Admin.ExtensionTweak.Installed.EMInstallConfigTemplate&amp;parent=$doc&amp;title=$!escapetool.url($request.configDocName)"))
    ## Stop processing, since we already sent a redirect.
    #stop
  #end
#end
{{/velocity}}

= Make sure an extension and all its dependencies are installed on wikis and not on root namespace =

{{velocity}}
#macro(getRootExtensions $installedExtension $extensionNamespace $rootExtensions)
  ## Check the passed extension
  #if ($installedExtension.isInstalled($null))
    #set($void = $rootExtensions.put($installedExtension.id, $installedExtension))
    #set($extensionNamespace = $null)
  #end
  ##
  ## Check dependencies
  #foreach ($dependency in $installedExtension.dependencies)
    #set($dependencyExtension = $installedExtensions.getInstalledExtension($dependency.id, $extensionNamespace))
    #getRootExtensions($dependencyExtension, $extensionNamespace, $rootExtensions)
  #end
#end

#if ($request.eaction == 'movetowikis')
  #set($installedExtension = $installedExtensions.getInstalledExtension($extensionId, $namespace))
  #if ($installedExtension.id.id == $extensionId)
    #if ($installedExtension.isInstalled($null))
      #set($namespace = $null)
    #end
    #set($backwardDependencies = $installedExtensions.getBackwardDependencies($extensionId, $namespace))
    #if ($backwardDependencies.isEmpty())
      #set($rootExtensions = {})
      #getRootExtensions($installedExtension, $namespace, $rootExtensions)
      #if ($rootExtensions.isEmpty())
        {{warning}}Extension with id **$extensionId** available on wiki **$wiki** is not root extension and none of its dependencies are.{{/warning}}
      #else
        #if ($request.confirm == 'true')
          #if ($xwiki.hasAccessLevel('programming', $doc.fullName))
            #set($allWikis = $services.wiki.getAllIds())
            #foreach ($rootExtension in $rootExtensions.values())
              #set($void = $installedExtensions.repository.uninstallExtension($rootExtension, $null))
              #foreach ($wiki in $allWikis)
                #set($void = $installedExtensions.repository.installExtension($rootExtension, "wiki:$wiki", $rootExtension.isDependency($null)))
              #end
            #end
            {{success}}
              The following root extensions have been moved to each wiki:
              #foreach ($rootExtension in $rootExtensions.values())
                * $rootExtension#if ($rootExtension.type == 'jar') {{warning}}(require a restart to be fully applied){{/warning}}#end

              #end
            {{/success}}
          #else
            {{error}}You need programming right to execute this action.{{/error}}
          #end
        #else
          {{info}}
            The following root extensions will be moved to each wiki:
            #foreach ($rootExtension in $rootExtensions.values())
              * $rootExtension#if ($rootExtension.type == 'jar')({{warning}}require a restart to be fully applied{{/warning}})#end

            #end

            {{html}}
              &lt;form&gt;
                &lt;input type="hidden" name="confirm" value="true"/&gt;
                &lt;input type="hidden" name="eaction" value="movetowikis"/&gt;
                &lt;input type="hidden" name="extensionId" value="$extensionId"&gt;
                &lt;input type="hidden" name="wiki" value="$wiki"/&gt;
                &lt;input type="submit" value="Confirm"/&gt;
              &lt;/form&gt;
            {{/html}}
          {{/info}}
        #end
      #end
    #else
      {{error}}Extension with id **$extensionId** has backward dependencies ($backwardDependencies).{{/error}}
    #end
  #else
    {{error}}No extension with id **$extensionId** can be found on namespace $namespace.{{/error}} 
  #end
#end

{{html}}
 &lt;form class="xform"&gt;
   &lt;input type="hidden" name="eaction" value="movetowikis"/&gt;&lt;/dd&gt;
   &lt;dl&gt;
      &lt;dt&gt;Extension Id&lt;/dt&gt;
      &lt;dd&gt;&lt;input type="text" name="extensionId" value="$extensionId"&gt;&lt;/dd&gt;
      &lt;dt&gt;Wiki where it's installed (anything if installed on root)&lt;/dt&gt;
      &lt;dd&gt;&lt;input type="text" name="wiki" value="$wiki"/&gt;&lt;/dd&gt;
    &lt;/dl&gt;
    &lt;span class="buttonwrapper"&gt;&lt;input type="submit" value="Move" class="button"/&gt;&lt;/span&gt;
  &lt;/form&gt; 
{{/html}}
{{/velocity}}

= Repair a XAR extension =

{{velocity}}
#set($extensionId = "$!request.extensionId")
#set($extVersion = "$!request.extensionVersion")
#if($request.action == 'dorepair')
  #if ($extensionId != '' &amp;&amp; $extVersion != '')
    #if ($xwiki.hasAccessLevel('programming', $doc.fullName))
  
    {{success}}
    Repairing extension **$extensionId** and version **$extVersion**:

    #foreach($requestedWiki in $request.getParameterValues('wikis'))
      #set ($repairJob = $services.extension.xar.repairInstalledExtension($extensionId, $extVersion, $requestedWiki))
      #set($discard = $repairJob.join())
      * Extension repaired on wiki $requestedWiki: $services.extension.getInstalledExtension($extensionId, "wiki:${requestedWiki}")
    #end
    {{/success}}

    #else
      {{error}}You need programming right to execute this action.{{/error}}
    #end
  #end
#elseif ($request.action == 'repairshowwikis')
  #if ($extensionId != '' &amp;&amp; $extVersion != '')
    #if ($xwiki.hasAccessLevel('programming', $doc.fullName))
    {{info}}
    Showing wikis for extension **$extensionId** and version **$extVersion**:

    {{html}}
    &lt;form class="xform" method="post" action="$doc.getURL()"&gt;
      &lt;input type="hidden" name="action" value="dorepair" /&gt;
      &lt;input type="hidden" name="extensionId" value="$extensionId"&gt;&lt;/input&gt;
      &lt;input type="hidden" name="extensionVersion" value="$extVersion"&gt;&lt;/input&gt;
      &lt;label&gt;Wikis&lt;/label&gt;
      &lt;ol&gt;
      #set($wikis = $services.wiki.getAll())
      #foreach($wiki in $sorttool.sort($wikis, ['id']))
        #set($installedExt = $services.extension.getInstalledExtension($extensionId, "wiki:${wiki.id}"))
        #if ($installedExt == $util.null)
          &lt;li&gt;&lt;span class="xwiki-form-listclass"&gt;
            &lt;input name="wikis" type="checkbox" value="$!escapetool.xml($wiki.id)" class='toggleable'&gt;
            $wiki.id - &lt;a href="$xwiki.getURL("${wiki.id}:Main.WebHome")"&gt;$wiki.defaultAlias&lt;/a&gt;
          &lt;/span&gt;&lt;/li&gt;
        #else
          &lt;li&gt;&lt;span class="xwiki-form-listclass"&gt;
            &lt;input name="wikis" type="checkbox" value="$!escapetool.xml($wiki.id)" class='toggleable' disabled="disabled"&gt;
            $wiki.id - &lt;a href="$xwiki.getURL("${wiki.id}:Main.WebHome")"&gt;$wiki.defaultAlias&lt;/a&gt; - &lt;strong&gt;Extension is installed on this wiki at version: $installedExt.id.version.value&lt;/strong&gt;
          &lt;/span&gt;&lt;/li&gt;
        #end
      #end
      &lt;/ol&gt;

      &lt;div class="buttonwrapper"&gt;
        &lt;input class="button" type="submit" value="Do repair" /&gt;
      &lt;/div&gt;
    &lt;/form&gt;
    {{/html}}

    {{/info}}
  
    #else
      {{error}}You need programming right to execute this action.{{/error}}
    #end
  #end
#end

{{html}}
  &lt;form class="xform" method="get" action="$doc.getURL()"&gt;
    &lt;input type="hidden" name="action" value="repairshowwikis" /&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;label&gt;Extension Id&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;input type="text" name="extensionId" value="$!extensionId"&gt;&lt;/input&gt;&lt;/dd&gt;
      &lt;dt&gt;&lt;label&gt;Extension Version&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;input type="text" name="extensionVersion" value="$!extensionVersion"&gt;&lt;/input&gt;&lt;/dd&gt;
    &lt;/dl&gt;
    &lt;div class="buttonwrapper"&gt;
       &lt;input class="button" type="submit" value="Repair" /&gt;
    &lt;/div&gt;
  &lt;/form&gt;
{{/html}}

{{/velocity}}

= Set dependency marker =

{{velocity}}
#set($extensionId = "$!request.extensionId")
#set($namespace = "$!request.namespace")
#if($request.action == 'setdependencymarker' &amp;&amp; ($request.dependency == 'true' || $request.dependency == 'false') &amp;&amp; $extensionId != '')
  #if ($xwiki.hasAccessLevel('programming', $doc.fullName))
    #if ($namespace == '')
      #set ($namespace = $NULL)
    #end
    #set ($installedExtension = $services.extension.installed.getInstalledExtension($extensionId, $namespace))
    #if ($installedExtension)
      #set ($dependency = $request.dependency == 'true')
      #set ($void = $services.extension.installed.repository.installExtension($installedExtension, $namespace, $dependency))
      {{success}}
        The dependency status of the extension **$installedExtension** has been set to **$request.dependency** on namespace **#if ($namespace)$namespace#{else}null#end**.
      {{/success}}
    #else
      {{error}}No extension with id **$extensionId** could be found on namespace **#if ($namespace)$namespace#{else}null#end**.{{/error}}
    #end
  #else
    {{error}}You need programming right to execute this action.{{/error}}
  #end
#end

{{html}}
  &lt;form class="xform" method="get" action="$doc.getURL()"&gt;
    &lt;input type="hidden" name="action" value="setdependencymarker" /&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;label&gt;Extension Id&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;input type="text" name="extensionId" value="$extensionId"&gt;&lt;/input&gt;&lt;/dd&gt;
      &lt;dt&gt;&lt;label&gt;Namespace (empty for root namespace)&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;input type="text" name="namespace" value="$!namespace"&gt;&lt;/input&gt;&lt;/dd&gt;
      &lt;dt&gt;Dependency&lt;/dt&gt;
      &lt;dd&gt;
        &lt;select name="dependency"&gt;
          &lt;option value="true"&gt;Yes&lt;/option&gt;
          &lt;option value="false"&gt;No&lt;/option&gt;
        &lt;/select&gt;
      &lt;/dd&gt;
    &lt;/dl&gt;
    &lt;div class="buttonwrapper"&gt;
       &lt;input class="button" type="submit" value="Set" /&gt;
    &lt;/div&gt;
  &lt;/form&gt;
{{/html}}

{{/velocity}}

= Configuration for silent extension installation =

{{velocity}}
#if("$!targetConfigName" != '' &amp;&amp; $xwiki.exists($targetConfigName))
  {{warning}}The target document already exists. Please choose a different name, or [[view the existing document&gt;&gt;$targetConfigName]]{{/warning}}
#elseif("$!targetConfigName" != '')
  {{warning}}You don't have permission to create that document{{/warning}}
#end

{{html}}
&lt;form action="" id="newconfigdoc" method="post"&gt;
  &lt;div&gt;
    &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
    &lt;label for="configSpaceName"&gt;Space: &lt;/label&gt;&lt;input type="text" id="configSpaceName" name="configSpaceName" value="Admin" size="8"/&gt;
    &lt;label for="configDocName"&gt;Document: &lt;/label&gt;&lt;input type="text" id="configDocName" name="configDocName" value="Document name" class="withTip"'/&gt;         
    &lt;span class="buttonwrapper"&gt;&lt;input type="submit" value="Create a new configuration" class="button"/&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;/form&gt;
{{/html}}


**Existing configurations**

#set($sql = ", BaseObject as obj where obj.name=doc.fullName and obj.className=? and obj.name&lt;&gt;?")
#foreach ($item in $services.query.hql($sql).bindValues(['Admin.ExtensionTweak.Installed.EMInstallConfigClass', 'Admin.ExtensionTweak.Installed.EMInstallConfigTemplate']).execute())
  * [[$item]]
#end
{{/velocity}}</content>
</xwikidoc>
